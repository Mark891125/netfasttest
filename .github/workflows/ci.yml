name: actions

on: 
  # push: # 推送时触发
  # pull_request: # PR时触发
  workflow_dispatch: # 手动触发
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      force_rebuild:
        description: '强制重新构建镜像'
        required: false
        default: false
        type: boolean

env:
  # 阿里云容器镜像服务配置
  ACR_REGISTRY: registry.cn-hangzhou.aliyuncs.com
  ACR_NAMESPACE: xmark
  ACR_REPOSITORY: codeup
  
  # 阿里云认证信息 - 需要在 GitHub Secrets 中配置
  ACR_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  ACR_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  
  # 镜像标签
  IMAGE_TAG: ${{ github.sha }}
jobs:
  bt-product-release:
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}  # main分支更新或手动触发
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 # pull代码到运行服务器上
    
    - name: Display workflow inputs (manual trigger)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Force rebuild: ${{ github.event.inputs.force_rebuild }}"
        echo "Triggered by: ${{ github.actor }}"
        
    - name: Login to Aliyun Container Registry (ACR)
      uses: aliyun/acr-login@v1 # 使用阿里云镜像服务action
      with:
        login-server: ${{ env.ACR_REGISTRY }}
        username: "${{ secrets.REGISTRY_USERNAME }}" # 引用GitHub repo设置的镜像容器服务用户名
        password: "${{ secrets.REGISTRY_PASSWORD }}" # 引用GitHub repo设置的镜像容器服务密码
        
    - name: Build and Push Docker Image
      env:
        IMAGE_TAG: ${{ github.sha }} # 用于标记容器版本号
        FULL_IMAGE_NAME: ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.ACR_REPOSITORY }}/netfasttest
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      run: |
        echo "Building image with tag: $IMAGE_TAG"
        echo "Target environment: $ENVIRONMENT"
        
        # 构建镜像
        docker build -t $FULL_IMAGE_NAME:$IMAGE_TAG .
        
        # 如果是手动触发且选择了强制重建，或者是生产环境，同时推送latest标签
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_rebuild }}" == "true" ]] || [[ "$ENVIRONMENT" == "production" ]]; then
          echo "Building latest tag..."
          docker tag $FULL_IMAGE_NAME:$IMAGE_TAG $FULL_IMAGE_NAME:latest
        fi

        # 如果存在latest标签，也推送它
        if docker images | grep -q "$FULL_IMAGE_NAME.*latest"; then
          for i in {1..3}; do
            echo "Attempt $i: Pushing $FULL_IMAGE_NAME:latest"
            if docker push $FULL_IMAGE_NAME:latest; then
              echo "Successfully pushed $FULL_IMAGE_NAME:latest"
              break
            else
              echo "Push latest failed, attempt $i/3"
              if [ $i -eq 3 ]; then
                echo "All push attempts for latest failed"
                exit 1
              fi
              sleep 10
            fi
          done
        fi
        
        echo "✅ Docker image push completed successfully!"
        